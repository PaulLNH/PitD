{"version":3,"sources":["assets\\js\\game.js"],"names":["config","type","Phaser","AUTO","width","height","zoom","pixelArt","parent","scene","preload","create","update","render","physics","default","arcade","gravity","y","game","Game","showDebug","username","usernameText","spotlight","load","image","tilemapTiledJSON","spritesheet","frameWidth","frameHeight","map","make","tilemap","key","tileWidth","tileHeight","tileset","addTilesetImage","collisionLayer","createStaticLayer","belowLayer","worldLayer","aboveLayer","aboveDecorLayer","decorLayer","setDepth","setCollisionByProperty","collides","debugGraphics","add","graphics","setAlpha","renderDebug","tileColor","collidingTileColor","Display","Color","faceColor","world","createDebugGraphic","teams","team","Math","round","random","spMax","sp1","objects","floor","player","sprite","x","body","setSize","setOffset","text","fontFamily","fontSize","color","fontWeight","collider","setCollideWorldBounds","console","log","anims","frames","generateFrameNumbers","start","end","frameRate","repeat","frame","dark","setScale","mask","Masks","BitmapMask","time","delta","speed","cursors","input","keyboard","createCursorKeys","velocity","set","left","isDown","setVelocityX","right","up","setVelocityY","down","play","stop","normalize","scale","debug","bodyInfo"],"mappings":"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","file":"game.ed88cdfc.map","sourceRoot":"..","sourcesContent":["// run 'http-server' in terminal to test\r\n\r\nconst config = {\r\n  type: Phaser.AUTO, // Which renderer to use\r\n  width: 640, // Canvas width in pixels (usually 800) - 171 /w mario tile example\r\n  height: 480, // Canvas height in pixels (usually 600) - 160 /w mario tile example\r\n  zoom: 1, // Since we're working with 16x16 pixel tiles, let's scale up the canvas by 3x\r\n  pixelArt: true, // Force the game to scale images up crisply\r\n  parent: \"pitd\", // ID of the DOM element to add the canvas to\r\n  scene: {\r\n    preload: preload,\r\n    create: create,\r\n    update: update,\r\n    render: render\r\n  },\r\n  physics: {\r\n    default: \"arcade\", // Simplest physics, box and circle colliders\r\n    arcade: {\r\n      gravity: {\r\n        y: 0 // Top down game, so no gravity\r\n      }\r\n    }\r\n  }\r\n};\r\n\r\n// Instanciate a new game instance\r\nconst game = new Phaser.Game(config);\r\n\r\n// Set to true to display collision debugging layer\r\nlet showDebug = false;\r\nvar username = \"Paul\";\r\nvar usernameText;\r\nvar spotlight;\r\n\r\n//////////////////////// PRELOAD ///////////////////////////\r\n// This runs once before anything else, loads up assets like images and audio\r\nfunction preload() {\r\n  this.load.image(\"tiles\", \"../assets/tilesets/tilesets.png\");\r\n  this.load.tilemapTiledJSON(\"map\", \"../assets/tilemaps/map.json\");\r\n  this.load.image(\"dark\", \"assets/sprites/dark.png\");\r\n  this.load.image(\"mask\", \"assets/sprites/mask.png\");\r\n  this.load.spritesheet(\"human\", \"../assets/sprites/human.png\", {\r\n    frameWidth: 16, // 16px human width\r\n    frameHeight: 32\r\n  });\r\n  this.load.spritesheet(\"zombie\", \"../assets/sprites/zombie.png\", {\r\n    frameWidth: 20, // 20px zombie width\r\n    frameHeight: 32\r\n  });\r\n}\r\n\r\n//////////////////////// CREATE ///////////////////////////\r\n// Loads elements into Phaser's cache (i.e. the name you used in preload)\r\nfunction create() {\r\n  ///// START MAP AND COLLISION /////\r\n  // Parameters are the name you gave the tileset in Tiled and then the key of the tileset image in\r\n  const map = this.make.tilemap({\r\n    key: \"map\",\r\n    tileWidth: 16,\r\n    tileHeight: 16\r\n  });\r\n  const tileset = map.addTilesetImage(\"tileset\", \"tiles\");\r\n\r\n  // Parameters: layer name (or index) from Tiled, tileset, x, y\r\n  const collisionLayer = map.createStaticLayer(\"collision\", tileset, 0, 0);\r\n  const belowLayer = map.createStaticLayer(\"below\", tileset, 0, 0);\r\n  const worldLayer = map.createStaticLayer(\"world\", tileset, 0, 0);\r\n  const aboveLayer = map.createStaticLayer(\"above\", tileset, 0, 0);\r\n  const aboveDecorLayer = map.createStaticLayer(\"aboveDecor\", tileset, 0, 0);\r\n  const decorLayer = map.createStaticLayer(\"decor\", tileset, 0, 0);\r\n\r\n  // By default, everything gets depth sorted on the screen in the order we created things. Here, we\r\n  // want the \"Above Player\" layer to sit on top of the player, so we explicitly give it a depth.\r\n  // Higher depths will sit on top of lower depth objects.\r\n  aboveLayer.setDepth(10);\r\n  aboveDecorLayer.setDepth(11);\r\n  collisionLayer.setDepth(0);\r\n\r\n  collisionLayer.setCollisionByProperty(\r\n    {\r\n      collides: true\r\n    },\r\n    true\r\n  );\r\n\r\n  // Debug collision //\r\n  if (showDebug) {\r\n    const debugGraphics = this.add.graphics().setAlpha(0.75);\r\n    collisionLayer.renderDebug(debugGraphics, {\r\n      tileColor: null, // Color of non-colliding tiles\r\n      collidingTileColor: new Phaser.Display.Color(243, 134, 48, 255), // Color of colliding tiles\r\n      faceColor: new Phaser.Display.Color(40, 39, 37, 255) // Color of colliding face edges\r\n    });\r\n    this.physics.world.createDebugGraphic();\r\n  }\r\n\r\n  ///// END MAP AND COLLISION /////\r\n\r\n  //////////////////////////////////////////////////////////////////////////////\r\n\r\n  ///// START PLAYER CONTROLLER /////\r\n  // Generates a random team (for testing)\r\n  let teams = [\"human\", \"zombie\"];\r\n  let team = teams[Math.round(Math.random())];\r\n\r\n  // Max number of spawn points in array format (actual number -1)\r\n  let spMax = 7;\r\n  // Randomly select spawn point\r\n  const sp1 =\r\n    map.objects[0].objects[\r\n      Math.floor(Math.floor(Math.random() * (spMax - 0 + 1)) + 0)\r\n    ];\r\n\r\n  // Creates a new player at the spawnpoint location with the random team from above\r\n  player = this.physics.add.sprite(sp1.x, sp1.y, team);\r\n  player.username = \"Paul\";\r\n  player.body.setSize(16, 10, false);\r\n  // x, y, width, height\r\n  player.body.setOffset(0, 22, 16, 5);\r\n\r\n  // Player name above head\r\n  usernameText = this.add.text(player.body.x, player.body.y, username, {\r\n    fontFamily: \"Helvetica\",\r\n    fontSize: 12,\r\n    color: \"#ff0044\",\r\n    fontWeight: \"bold\"\r\n  });\r\n  usernameText.setDepth(25);\r\n\r\n  this.physics.add.collider(player, collisionLayer);\r\n\r\n  player.setCollideWorldBounds(true);\r\n  console.log(player.body);\r\n\r\n  this.anims.create({\r\n    key: \"left\",\r\n    frames: this.anims.generateFrameNumbers(team, {\r\n      start: 3,\r\n      end: 5\r\n    }),\r\n    frameRate: 10,\r\n    repeat: -1\r\n  });\r\n\r\n  this.anims.create({\r\n    key: \"turn\",\r\n    frames: [\r\n      {\r\n        key: team,\r\n        frame: 2\r\n      }\r\n    ],\r\n    frameRate: 20\r\n  });\r\n\r\n  this.anims.create({\r\n    key: \"right\",\r\n    frames: this.anims.generateFrameNumbers(team, {\r\n      start: 6,\r\n      end: 8\r\n    }),\r\n    frameRate: 10,\r\n    repeat: -1\r\n  });\r\n\r\n  this.anims.create({\r\n    key: \"up\",\r\n    frames: this.anims.generateFrameNumbers(team, {\r\n      start: 9,\r\n      end: 11\r\n    }),\r\n    frameRate: 10,\r\n    repeat: -1\r\n  });\r\n\r\n  this.anims.create({\r\n    key: \"down\",\r\n    frames: this.anims.generateFrameNumbers(team, {\r\n      start: 0,\r\n      end: 2\r\n    }),\r\n    frameRate: 10,\r\n    repeat: -1\r\n  });\r\n\r\n  // Darkness mask\r\n  var dark = this.add.image(0, 0, \"dark\");\r\n  dark.setDepth(30);\r\n  spotlight = this.make.sprite({\r\n    x: 0,\r\n    y: 0,\r\n    key: \"mask\",\r\n    add: false\r\n  });\r\n  spotlight.setScale(0.5);\r\n  dark.mask = new Phaser.Display.Masks.BitmapMask(this, spotlight);\r\n\r\n  // Attach the mask to the pointer\r\n  // this.input.on('pointermove', function (pointer) {\r\n  //     spotlight.x = pointer.x;\r\n  //     spotlight.y = pointer.y;\r\n  // });\r\n}\r\n\r\n//////////////////////// UPDATE (GAME LOOP) ///////////////////////////\r\n// Runs once per frame for the duration of the scene\r\nfunction update(time, delta) {\r\n  let speed = 100;\r\n  cursors = this.input.keyboard.createCursorKeys();\r\n\r\n  usernameText.x = Math.floor(player.x - usernameText.width / 2);\r\n  usernameText.y = Math.floor(player.y - player.height + 5);\r\n  spotlight.x = player.x;\r\n  spotlight.y = player.y;\r\n\r\n  // Default velocity is 0 (stopped)\r\n  player.body.velocity.set(0);\r\n  if (cursors.left.isDown) {\r\n    player.setVelocityX(-speed);\r\n  } else if (cursors.right.isDown) {\r\n    player.setVelocityX(speed);\r\n  }\r\n\r\n  if (cursors.up.isDown) {\r\n    player.setVelocityY(-speed);\r\n  } else if (cursors.down.isDown) {\r\n    player.setVelocityY(speed);\r\n  }\r\n\r\n  if (player.body.velocity.x > 0) {\r\n    player.anims.play(\"right\", true);\r\n  } else if (player.body.velocity.x < 0) {\r\n    player.anims.play(\"left\", true);\r\n  }\r\n\r\n  if (player.body.velocity.x == 0) {\r\n    if (player.body.velocity.y < 0) {\r\n      player.anims.play(\"up\", true);\r\n    } else if (player.body.velocity.y > 0) {\r\n      player.anims.play(\"down\", true);\r\n    } else {\r\n      player.anims.stop();\r\n    }\r\n  }\r\n  // Prevents character from moving faster while pressing two directions\r\n  player.body.velocity.normalize().scale(speed);\r\n\r\n  ///// END PLAYER CONTROLLER /////\r\n}\r\n\r\nfunction render() {\r\n  game.debug.bodyInfo(player, 32, 32);\r\n\r\n  game.debug.body(player);\r\n}\r\n"]}